name: Auto Version & Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'docs/**'
      - '.github/**'

permissions:
  contents: write

jobs:
  auto-version:
    name: Auto Version and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version: 24
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Determine version bump type
        id: version_type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            # Auto-determine based on commit messages since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

            # Get commit messages since last tag
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s" 2>/dev/null || git log --pretty=format:"%s")

            # Check for breaking changes or major updates
            if echo "$COMMITS" | grep -qE "(BREAKING|major:|feat!:|fix!:)"; then
              echo "type=major" >> $GITHUB_OUTPUT
            # Check for new features
            elif echo "$COMMITS" | grep -qE "(feat:|feature:|add:|new:)"; then
              echo "type=minor" >> $GITHUB_OUTPUT
            # Default to patch for fixes, chores, etc.
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Get current version
        id: current_version
        run: |
          CURRENT=$(node -p "require('./package.json').version")
          echo "version=$CURRENT" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          npm version ${{ steps.version_type.outputs.type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # Generate changelog
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "This is the first release of Super Simple TfL Status." >> CHANGELOG.md
          fi

          # Set multiline output
          {
            echo 'changelog<<EOF'
            cat CHANGELOG.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to ${{ steps.bump_version.outputs.version }}"

      - name: Create and push tag
        run: |
          git tag ${{ steps.bump_version.outputs.tag }}
          git push origin main
          git push origin ${{ steps.bump_version.outputs.tag }}

      - name: Create deployment artifact
        run: |
          # Create a deployment package
          mkdir -p dist
          cp -r site/* dist/
          cp package.json dist/
          cp README.md dist/
          tar -czf super-simple-tfl-status-${{ steps.bump_version.outputs.tag }}.tar.gz -C dist .

      - name: Create Release
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e # v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.tag }}
          release_name: Release ${{ steps.bump_version.outputs.tag }}
          body: |
            ## Auto-generated Release ${{ steps.bump_version.outputs.tag }}

            **Version bump type:** ${{ steps.version_type.outputs.type }}
            **Previous version:** ${{ steps.current_version.outputs.version }}

            ${{ steps.changelog.outputs.changelog }}

            ### Download
            - [Source code (zip)](https://github.com/${{ github.repository }}/archive/${{ steps.bump_version.outputs.tag }}.zip)
            - [Source code (tar.gz)](https://github.com/${{ github.repository }}/archive/${{ steps.bump_version.outputs.tag }}.tar.gz)
            - [Deployment package](https://github.com/${{ github.repository }}/releases/download/${{ steps.bump_version.outputs.tag }}/super-simple-tfl-status-${{ steps.bump_version.outputs.tag }}.tar.gz)
          draft: false
          prerelease: ${{ contains(steps.bump_version.outputs.tag, '-') }}